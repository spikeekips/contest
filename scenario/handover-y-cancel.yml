# handover
# - 2 nodes: no0, no1
# - no0 and no1 has same address and keypair
# - no0 under consensus
# - no1 tries to handover to no0
# - no1 under handover state
# - no1 cancels handover
# - no0 still do consensus
# - no1 in syncing state

---
vars:
  .network_id: mitum contest; Sat 26 Dec 2020 05:29:13 AM KST

designs:
  common: |
    {{ setVar ".self.privatekey" (getOrCreateVar ".privatekey" newKey) }}
    {{ setVar ".self.publickey" .self.privatekey.Publickey }}

    address: {{ setgetVar ".self.address" "no0sas" }}
    privatekey: {{ .self.privatekey }}
    #publickey: {{ .self.privatekey.Publickey }}
    network_id: {{ .network_id }}
    network:
      bind: 0.0.0.0:{{ freePort .self.host (print "node-" .self.alias) "udp" }}
      publish: {{ setgetVar ".self.network.publish" ( print .self.host.PublishHost ":" ( freePort .self.host (print "node-" .self.alias) "udp" ) ) }}
      tls_insecure: true
    storage:
      base: /data
    ballot-stuck-resolver: dummy

  genesis: |
      facts:
        - _hint: suffrage-genesis-join-fact-v0.0.1
          nodes:
            - _hint: node-v0.0.1
              address: {{ .nodes.no0.address }}
              publickey: {{ .nodes.no0.publickey }}
     
        - _hint: genesis-network-policy-fact-v0.0.1
          policy:
            _hint: network-policy-v0.0.1
            max_operations_in_proposal: 99
            suffrage_candidate_lifespan: 33
            suffrage_candidate_limiter:
              _hint: fixed-suffrage-candidate-limiter-rule-v0.0.1
              limit: 1 
            max_suffrage_size: 99
            suffrage_expel_lifespan: 99

  number_nodes: 2
  nodes:
    no1: |
      parameters:
        isaac:
          max_try_handover_y_broker_sync_data: 33
      sync_sources:
        - type: sync-source-node
          address: {{ .nodes.no0.address }}
          publickey: {{ .nodes.no0.publickey }}
          publish: "{{ .nodes.no0.network.publish }}"
          tls_insecure: true

expects:
  - condition: |
      {"msg": "contest ready"}
    actions:
      - type: "init-nodes"
        args:
          - /cmd
          - init
          - --design=config.yml
          - genesis.yml
        range:
          - node: [no0]

  - condition: |
      {
        "x.message": "genesis block generated",
        "x.blockmap.manifest.height": 0,
        "x.blockmap.node": "{{ .nodes.no0.address }}",
        "x.blockmap.signer": "{{ .nodes.no0.publickey }}"
      }

  - condition: |
      {"node": "no0", "x.exit_code": 0, "stderr": true}
    actions:
      - type: "run-nodes"
        args:
          - /cmd
          - run
          - --design=config.yml
          - --dev.allow-consensus
        range:
          - node: [no0]

  - condition: |
      {"node": "no0", "x.message": "state switched", "x.next_state.next": "CONSENSUS"}
    registers:
      - assign: .matched.no0.start_to_consensus

  - condition: |
      {"_id": {"$gt": "{{ .matched.no0.start_to_consensus._id }}"}, "node": "no0", "x.height": {"$gte": 3 }, "x.message": "new block saved"}

  - log: start handover y, no1
  - condition: "{}"
    actions:
      - type: "run-nodes"
        args:
          - /cmd
          - run
          - --design=config.yml
        range:
          - node: [no1]

  - condition: |
      {"node": "no1", "x.message": "state switched", "x.next_state.next": "SYNCING"}

  - condition: |
      $ {{ hostFile .self.host "cmd" }} \
          --log.level=trace \
          --log.format=json \
          handover start \
          "{{ .nodes.no0.address }}" \
          "{{ .nodes.no0.network.publish}}#tls_insecure" \
          "{{ .network_id }}" \
          "{{ .nodes.no1.network.publish}}#tls_insecure" \
          "{{ .nodes.no1.privatekey }}"
    range:
      - node: [no1]
    if_condition_failed: "stop-contest"

  - condition: |
      {"node": "no1", "x.message": "handover y broker created"}

  - condition: |
      {"node": "no1", "x.message": "handover asked"}

  - condition: |
      {"node": "no0", "x.message": "handover x broker created"}

  - condition: |
      {"node": "no1", "x.message": "state switched", "x.next_state.next": "HANDOVER"}
    registers:
      - assign: .matched.no1.in_handover

  - condition: |
      {"_id": {"$gt": "{{ .matched.no1.in_handover._id }}"}, "node": "no1", "x.message": "new block saved"}

  - log: no1 tries to cancel handover
  - condition: |
      $ {{ hostFile .self.host "cmd" }} \
          --log.level=trace \
          --log.format=json \
          handover cancel \
          "{{ .network_id }}" \
          "{{ .nodes.no1.network.publish}}#tls_insecure" \
          "{{ .nodes.no1.privatekey }}"
    range:
      - node: [no1]
    if_condition_failed: "stop-contest"

  - condition: |
      {"node": "no1", "x.message": "handover y canceled"}

  - condition: |
      {"node": "no0", "x.message": "canceled by message"}

  - condition: |
      {"_id": {"$gt": "{{ .matched.no1.in_handover._id }}"}, "node": "no1", "x.message": "state switched", "x.next_state.from": "HANDOVER", "x.next_state.next": "SYNCING"}
    registers:
      - assign: .matched.no1.in_syncing

  - condition: |
      {"_id": {"$gt": "{{ .matched.no1.in_syncing._id }}"}, "node": "no1", "x.message": "new block saved"}
    registers:
      - assign: .matched.no1.new_block_in_syncing

  - condition: |
      $ {{ hostFile .self.host "cmd" }} network client node-info --log.level=trace "{{ .network_id }}" "{{ .nodes.no0.network.publish}}#tls_insecure" | \
        jq -e -c 'select(.consensus.state == "CONSENSUS")'
    range:
      - node: [no0]

  - condition: |
      {"node": "no1", "x.height": {"$gt": {{ .matched.no1.new_block_in_syncing.x.height }}}, "x.message": "new block saved"}

