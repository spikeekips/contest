# - no0, no1, no2, no3 enter consensus
# - no0 is the fixed proposer
# - no3 set 'not-allow' consensus by network client
# - no3 enters syncing state

---
vars:
  .network_id: mitum contest; Sat 26 Dec 2020 05:29:13 AM KST

designs:
  common: |
    {{ setVar ".self.privatekey" newKey }}
    {{ setVar ".self.publickey" .self.privatekey.Publickey }}

    address: {{ setgetVar ".self.address" ( printf "%ssas" .self.alias ) }}
    privatekey: {{ .self.privatekey }}
    #publickey: {{ .self.privatekey.Publickey }}
    network_id: {{ .network_id }}
    network:
      bind: 0.0.0.0:{{ freePort .self.host (print "node-" .self.alias) "udp" }}
      publish: {{ setgetVar ".self.network.publish" ( print .self.host.PublishHost ":" ( freePort .self.host (print "node-" .self.alias) "udp" ) ) }}
      tls_insecure: true
    storage:
      base: /data
    ballot-stuck-resolver: dummy
    proposer-selector:
      script: |
        function selectProposer(point, nodes) {
            if (nodes.length < 1) {
              log.debug("empty nodes given")
           
              return ""
            }
           
            var found = false;
           
            nodes.forEach(function(item, index, arr) {
              if (item.address == "no0sas") {
                found = true
              }
            })

            log.debug("no0sas found?", "point", point, "nodes", nodes, "found", found)

            if (!found) {
              return "" /* if no0sas is not in nodes, default proposer will be used */
            }

            return "no0sas"
        }

  genesis: |
      facts:
        - _hint: suffrage-genesis-join-fact-v0.0.1
          nodes:
            - _hint: node-v0.0.1
              address: {{ .nodes.no0.address }}
              publickey: {{ .nodes.no0.publickey }}
            - _hint: node-v0.0.1
              address: {{ .nodes.no1.address }}
              publickey: {{ .nodes.no1.publickey }}
            - _hint: node-v0.0.1
              address: {{ .nodes.no2.address }}
              publickey: {{ .nodes.no2.publickey }}
            - _hint: node-v0.0.1
              address: {{ .nodes.no3.address }}
              publickey: {{ .nodes.no3.publickey }}
     
        - _hint: genesis-network-policy-fact-v0.0.1
          policy:
            _hint: network-policy-v0.0.1
            max_operations_in_proposal: 99
            suffrage_candidate_lifespan: 33
            suffrage_candidate_limiter:
              _hint: fixed-suffrage-candidate-limiter-rule-v0.0.1
              limit: 1 
            max_suffrage_size: 99
            suffrage_expel_lifespan: 99
  
  number_nodes: 4
  nodes:
    no0: |
      sync_sources:
        - type: sync-source-node
          address: {{ .nodes.no1.address }}
          publickey: {{ .nodes.no1.publickey }}
          publish: "{{ .nodes.no1.network.publish }}"
          tls_insecure: true

    no1: |
      sync_sources:
        - type: sync-source-node
          address: {{ .nodes.no0.address }}
          publickey: {{ .nodes.no0.publickey }}
          publish: "{{ .nodes.no0.network.publish }}"
          tls_insecure: true

    no2: |
      sync_sources:
        - type: sync-source-node
          address: {{ .nodes.no0.address }}
          publickey: {{ .nodes.no0.publickey }}
          publish: "{{ .nodes.no0.network.publish }}"
          tls_insecure: true

    no3: |
      sync_sources:
        - type: sync-source-node
          address: {{ .nodes.no0.address }}
          publickey: {{ .nodes.no0.publickey }}
          publish: "{{ .nodes.no0.network.publish }}"
          tls_insecure: true

expects:
  - condition: |
      {"msg": "contest ready"}
    actions:
      - type: "init-nodes"
        args:
          - /cmd
          - init
          - --design=config.yml
          - genesis.yml
        range:
          - node: [no0]

  - condition: |
      {
        "x.message": "genesis block generated",
        "x.blockmap.manifest.height": 0,
        "x.blockmap.node": "{{ .nodes.no0.address }}",
        "x.blockmap.signer": "{{ .nodes.no0.publickey }}"
      }
  
  - condition: |
      {"node": "no0", "x.exit_code": 0, "stderr": true}
    actions:
      - type: "run-nodes"
        args:
          - /cmd
          - run
          - --design=config.yml
          - --dev.allow-consensus
          - --dev.exit-broken
        range:
          - node: [no0]

      - type: "run-nodes"
        args:
          - /cmd
          - run
          - --design=config.yml
          - --discovery
          - "{{ .nodes.no0.network.publish }}#tls_insecure"
          - --dev.allow-consensus
          - --dev.exit-broken
        range:
          - node: [no1, no2, no3]

  - condition: |
      {"x.message": "state switched", "x.next_state.next": "CONSENSUS"}
    registers:
      - assign: .matched.consensus
    range:
      - node: [no0, no1, no2, no3]

  - condition: |
      {"x.height": 2, "x.message": "new block saved"}
    range:
      - node: [no0, no1, no2, no3]
    registers:
      - assign: .matched.new_block

  - log: set 'not-allow' for no3

  - condition: |
      $ {{ hostFile .self.host "cmd" }} network client node write \
          --log.format=json \
          --log.level=trace \
          "{{ .network_id }}" "{{ .nodes.no3.network.publish}}#tls_insecure" "{{ .nodes.no3.privatekey }}" states.allow_consensus false
    range:
      - node: [no3]
    if_condition_failed: "stop-contest"

  - condition: |
      {"_id": {"$gt": "{{ .matched.consensus._id}}" }, "x.message": "state switched", "x.current_state": "CONSENSUS", "x.next_state.next": "SYNCING"}
    registers:
      - assign: .matched.no3_syncing
    range:
      - node: [no3]

  - log: check no3 left
  - condition: |
      {"_id": {"$gt": "{{ .matched.consensus._id }}" }, "x.member.meta.address": "{{ .nodes.no3.address }}", "x.member.meta.publickey": "{{ .nodes.no3.publickey }}", "x.message": "member left"}
    range:
      - node: [no0, no1, no2, no3]

  - condition: |
      {"x.height": {"$gte": {{ addInt .matched.new_block.x.height 9 }} }, "x.message": "new block saved"}
    range:
      - node: [no0, no1, no2, no3]
    registers:
      - assign: .matched.new_block_after_no3_syncing
  
  - log: set 'allow' for no3
  
  - condition: |
      $ {{ hostFile .self.host "cmd" }} network client node write \
          --log.format=json \
          --log.level=trace \
          "{{ .network_id }}" "{{ .nodes.no3.network.publish}}#tls_insecure" "{{ .nodes.no3.privatekey }}" states.allow_consensus true
    range:
      - node: [no3]
    if_condition_failed: "stop-contest"

  - condition: |
      {"_id": {"$gt": "{{ .matched.new_block_after_no3_syncing._id}}" }, "x.message": "state switched", "x.next_state.next": "CONSENSUS"}
    range:
      - node: [no3]

  - log: check no3 joined again
  - condition: |
      {"_id": {"$gt": "{{ .matched.new_block_after_no3_syncing._id }}" }, "x.member.meta.address": "{{ .nodes.no3.address }}", "x.member.meta.publickey": "{{ .nodes.no3.publickey }}", "x.message": "member joined"}
    range:
      - node: [no0, no1, no2, no3]

  - condition: |
      {"x.height": {"$gte": {{ addInt .matched.new_block_after_no3_syncing.x.height 9 }} }, "x.message": "new block saved"}
    range:
      - node: [no0, no1, no2, no3]

