# one consensus node, no0
# 1. init
# 1. move block item data under file server
# 1. new block item files
# 1. start node with remote items
# 1. write new block item files
# 1. run new node, no1
# 1. no1 can sync

---
vars:
  .network_id: mitum contest; Sat 26 Dec 2020 05:29:13 AM KST

designs:
  common: |
    {{ setVar ".self.privatekey" newKey }}
    {{ setVar ".self.publickey" .self.privatekey.Publickey }}
    {{ setVar ".self.fileserver.port"  (freePort .self.host "nginx-fileserver" "tcp") }}
    {{ setVar ".self.fileserver.publish" (print "http://" .self.host.PublishHost ":" .self.fileserver.port) }}

    address: {{ setgetVar ".self.address" ( printf "%ssas" .self.alias ) }}
    privatekey: {{ .self.privatekey }}
    #publickey: {{ .self.privatekey.Publickey }}
    network_id: {{ .network_id }}
    network:
      bind: 0.0.0.0:{{ freePort .self.host (print "node-" .self.alias) "udp" }}
      publish: {{ setgetVar ".self.network.publish" ( print .self.host.PublishHost ":" ( freePort .self.host (print "node-" .self.alias) "udp" ) ) }}
      tls_insecure: true
    storage:
      base: /data
    ballot-stuck-resolver: dummy
    parameters:
      misc:
        block_item_readers_remove_empty_after: 6s

  genesis: |
      facts:
        - _hint: suffrage-genesis-join-fact-v0.0.1
          nodes:
            - _hint: node-v0.0.1
              address: {{ .nodes.no0.address }}
              publickey: {{ .nodes.no0.publickey }}
        - _hint: genesis-network-policy-fact-v0.0.1
          policy:
            _hint: network-policy-v0.0.1
            max_operations_in_proposal: 99
            suffrage_candidate_lifespan: 33
            suffrage_candidate_limiter:
              _hint: fixed-suffrage-candidate-limiter-rule-v0.0.1
              limit: 1 
            max_suffrage_size: 99
            suffrage_expel_lifespan: 99
  
  number_nodes: 2
  nodes:
    no1: |
      sync_sources:
        - type: sync-source-node
          address: {{ .nodes.no0.address }}
          publickey: {{ .nodes.no0.publickey }}
          publish: "{{ .nodes.no0.network.publish }}"
          tls_insecure: true

expects:
  - condition: |
      {"msg": "contest ready"}
    actions:
      - type: "init-nodes"
        args:
          - /cmd
          - init
          - --design=config.yml
          - genesis.yml
        range:
          - node: [no0]

  - condition: |
      {
        "x.message": "genesis block generated",
        "x.blockmap.manifest.height": 0,
        "x.blockmap.node": "{{ with ( index .nodes .self.range.node ) }}{{ .address }}{{ end }}",
        "x.blockmap.signer": "{{ with ( index .nodes .self.range.node ) }}{{ .publickey }}{{ end }}"
      }
    range:
      - node: [no0]
  
  - condition: |
      {"x.exit_code": 0, "stderr": true}
    range:
      - node: [no0]

  - condition: |
      $ mkdir -p "{{ .self.host.Base }}/remote" || exit 1
        echo {{ .nodes.no0.fileserver.publish }}
    if_condition_failed: "stop-contest"
    actions:
      - type: "run-nginx"
        properties:
          name: "fileserver"
          root: "{{ .self.host.Base }}/remote"
          port: |
            {{ .self.fileserver.port }}
        range:
          - node: [no0]
    range:
      - node: [no0]

  - log: move genesis block item files
  - condition: |
      $ remote="{{ .self.host.Base }}/remote/{{ .self.range.node }}"
        local="{{ .self.host.Base }}/{{ .self.range.node }}/data/000/000/000/000/000/000/000"

        mkdir -p "$remote" || exit 1
        mv "$local" "$remote"/0 && chmod -R 777 "$remote"/
    if_condition_failed: "stop-contest"
    range:
      - node: [no0]

  - log: update genesis block item files json
  - condition: |
      $ bfiles="{{ .self.host.Base }}/{{ .self.range.node }}/data/000/000/000/000/000/000/0.json"

          echo '>' "$bfiles"
          cat "$bfiles" | jq
          echo '<' "$bfiles"

          cat "$bfiles" | sed -e "s@local://@{{ .self.fileserver.publish }}/{{ .self.alias }}/0@g" | \
              jq '(.items.proposal | select(. != null)).compress_format = "gz"' | \
              jq '(.items.operations | select(. != null)).compress_format = "gz"' | \
              jq '(.items.operations_tree | select(. != null)).compress_format = "gz"' | \
              jq '(.items.states | select(. != null)).compress_format = "gz"' | \
              jq '(.items.states_tree | select(. != null)).compress_format = "gz"' \
             > "$bfiles".tmp || exit 1
          echo '>' "$bfiles".tmp
          cat "$bfiles".tmp | jq
          echo '<' "$bfiles".tmp

          mv "$bfiles".tmp "$bfiles"
    if_condition_failed: "stop-contest"
    range:
      - node: [no0]

  - log: check file server
  - condition: |
      $ curl -s {{ .nodes.no0.fileserver.publish }}/{{ .self.alias }}/0/map.json | grep '^{' | \
          jq -e -c 'select(.manifest.height == 0)'
    if_condition_failed: "stop-contest"
    actions:
      - type: "run-nodes"
        args:
          - /cmd
          - run
          - --design=config.yml
          - --dev.allow-consensus
        range:
          - node: [no0]
    range:
      - node: [no0]

  - condition: |
      {"x.message": "state switched", "x.next_state.next": "CONSENSUS"}
    range:
      - node: [no0]

  - condition: |
      {"x.height": {"$gt": 1}, "x.message": "new block saved"}
    range:
      - node: [no0]

  - log: move height 1 block item files
  - condition: |
      $ remote="{{ .self.host.Base }}/remote/{{ .self.range.node }}"
        local="{{ .self.host.Base }}/{{ .self.range.node }}/data/000/000/000/000/000/000/001"

        cp -r "$local" "$remote"/1 && chmod -R 777 "$remote"/
    if_condition_failed: "stop-contest"
    range:
      - node: [no0]

  - log: update height 1 block item files json
  - condition: |
      $ bfiles="{{ .self.host.Base }}/{{ .self.range.node }}/data/000/000/000/000/000/000/1.json"

          echo '>' "$bfiles"
          cat "$bfiles" | jq
          echo '<' "$bfiles"

          cat "$bfiles" | sed -e "s@local://@{{ .self.fileserver.publish }}/{{ .self.alias }}/1@g" | \
              jq '(.items.proposal | select(. != null)).compress_format = "gz"' | \
              jq '(.items.operations | select(. != null)).compress_format = "gz"' | \
              jq '(.items.operations_tree | select(. != null)).compress_format = "gz"' | \
              jq '(.items.states | select(. != null)).compress_format = "gz"' | \
              jq '(.items.states_tree | select(. != null)).compress_format = "gz"' \
             > "$bfiles".tmp || exit 1
          echo '>' "$bfiles".tmp
          cat "$bfiles".tmp | jq
          echo '<' "$bfiles".tmp

          {{ hostFile .self.host "cmd" }} network client node write \
            --log.format=json \
            --log.level=trace \
            "{{ .network_id }}" "{{ .nodes.no0.network.publish}}#tls_insecure" "{{ .nodes.no0.privatekey }}" \
            block_item_files.1 "$bfiles".tmp --input.is-file
    if_condition_failed: "stop-contest"
    range:
      - node: [no0]

  - log: check height 1 block item files json
  - condition: |
      $ {{ hostFile .self.host "cmd" }} network client node read \
          --log.format=json \
          --log.level=trace \
          --format=json \
          "{{ .network_id }}" "{{ .nodes.no0.network.publish}}#tls_insecure" "{{ .nodes.no0.privatekey }}" \
          block_item_files.1 | tee /dev/stderr | jq -e -c 'select(.items.map.uri == "{{ .self.fileserver.publish }}/{{ .self.alias }}/1/map.json")' || exit 1

        curl -s {{ .nodes.no0.fileserver.publish }}/{{ .self.alias }}/1/map.json | tee /dev/stderr | grep '^{' | jq -e -c 'select(.manifest.height == 1)'
    actions:
      - type: "run-nodes"
        args:
          - /cmd
          - run
          - --design=config.yml
          - --discovery
          - "{{ .nodes.no0.network.publish }}#tls_insecure"
          - --dev.allow-consensus
          - --dev.exit-broken
        range:
          - node: [no1]
    if_condition_failed: "stop-contest"
    range:
      - node: [no0]

  - condition: |
      {"node": "no1", "x.message": "state switched", "x.current_state": "BOOTING", "x.next_state.next": "SYNCING"}

  - condition: |
      {"node": "no1", "x.message": "new block saved", "x.height": { "$gte": 1 }}

  - log: check whether height 1 block item directory removed
  - condition: |
      {"node": "no0", "x.height": {"$gt": 6}, "x.message": "new block saved"}
    actions:
    - type: "host-command"
      args:
        - |
          $ local="{{ .self.host.Base }}/{{ .self.range.node }}/data/000/000/000/000/000/000"
            find $local
            test ! -d $local/001 && true
      range:
        - node: [no0]
