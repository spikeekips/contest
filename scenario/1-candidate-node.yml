# 1 node can be candidate and join consensus
# - 2 nodes: no0, no1
# - no0 is in suffrage from genesis
# - no1 tries to be candidate
# - no1 tries to join consensus

---
ignore_abnormal_container_exit: true

vars:
  .network_id: mitum contest; Sat 26 Dec 2020 05:29:13 AM KST

designs:
  common: |
    {{ setVar ".self.privatekey" newKey }}
    {{ setVar ".self.publickey" .self.privatekey.Publickey }}

    address: {{ setgetVar ".self.address" ( printf "%ssas" .self.alias ) }}
    privatekey: {{ .self.privatekey }}
    #publickey: {{ .self.privatekey.Publickey }}
    network_id: {{ .network_id }}
    network:
      bind: 0.0.0.0:{{ freePort .self.host (print "node-" .self.alias) "udp" }}
      publish: {{ setgetVar ".self.network.publish" ( print .self.host.PublishHost ":" ( freePort .self.host (print "node-" .self.alias) "udp" ) ) }}
      tls_insecure: true
    storage:
      base: /data
    ballot-stuck-resolver: dummy

  genesis: |
      facts:
        - _hint: suffrage-genesis-join-fact-v0.0.1
          nodes:
            - _hint: node-v0.0.1
              address: {{ .nodes.no0.address }}
              publickey: {{ .nodes.no0.publickey }}
     
        - _hint: genesis-network-policy-fact-v0.0.1
          policy:
            _hint: network-policy-v0.0.1
            max_operations_in_proposal: 99
            suffrage_candidate_lifespan: 33
            suffrage_candidate_limiter:
              _hint: fixed-suffrage-candidate-limiter-rule-v0.0.1
              limit: 1 
            max_suffrage_size: 99
            suffrage_expel_lifespan: 99

  number_nodes: 2
  nodes:
    no1: |
      sync_sources:
        - type: sync-source-node
          address: {{ .nodes.no0.address }}
          publickey: {{ .nodes.no0.publickey }}
          publish: "{{ .nodes.no0.network.publish }}"
          tls_insecure: true

expects:
  - condition: |
      {"msg": "contest ready"}
    actions:
      - type: "init-nodes"
        args:
          - /cmd
          - init
          - genesis.yml
          - --design=config.yml
        range:
          - node: [no0]

  - condition: |
      {
        "x.message": "genesis block generated",
        "x.blockmap.manifest.height": 0,
        "x.blockmap.node": "{{ .nodes.no0.address }}",
        "x.blockmap.signer": "{{ .nodes.no0.publickey }}"
      }
    registers:
      - assign: .matched.no0.genesis

  - condition: |
      {"_id": {"$gt": "{{ .matched.no0.genesis._id }}" }, "node": "no0", "x.exit_code": 0, "stderr": true}
    actions:
      - type: "run-nodes"
        args:
          - /cmd
          - run
          - --design=config.yml
          - --dev.allow-consensus
        range:
          - node: [no0]

  - condition: |
      {"node": "no0", "x.message": "new block saved", "x.height": {"$gt": 0}}
    actions: # send suffrage-candidate operation
    - type: "host-command"
      args:
        - |
          $ op="{{ hostBase .self.host }}/op.json"; \
            echo '{"fact": { "address": "{{ .nodes.no1.address }}", "publickey": "{{ .nodes.no1.publickey }}", "_hint": "suffrage-candidate-fact-v0.0.1" }, "_hint": "suffrage-candidate-operation-v0.0.1"}' | \
              {{ hostFile .self.host "cmd" }} key sign "{{ .nodes.no1.privatekey }}" "{{ .network_id }}" - --node "{{ .nodes.no1.address }}" --token findme | \
              {{ hostFile .self.host "cmd" }} key sign "{{ .nodes.no0.privatekey }}" "{{ .network_id }}" - --node "{{ .nodes.no0.address }}" > $op && \
              cat $op > /dev/stderr && \
              {{ hostFile .self.host "cmd" }} network client send-operation --log.level=trace "{{ .network_id }}" "{{ .nodes.no0.network.publish}}#tls_insecure" $op
      range:
        - node: [no0]

  - condition: |
      {"node": "no0", "x.message": "new block saved", "x.height": {"$gte": 3}}

  # check state of candidate operation
  - condition: |
      $ {{ hostFile .self.host "cmd" }} network client state --log.level=trace "{{ .network_id }}" "{{ .nodes.no0.network.publish}}#tls_insecure" 'suffrage_candidate' | \
          jq -e -c '. as $root | .value.nodes[] | select( (.node.address == "{{ .nodes.no1.address }}") and (.node.publickey == "{{ .nodes.no1.publickey }}")) | $root'
    range:
      - node: [no0]
    registers:
      - assign: .matched.candidate_state_in_state
        format: json

  - condition: |
      $ state="{{ hostBase .self.host }}/state.json"; \
        {{ hostFile .self.host "cmd" }} network client state --log.level=trace "{{ .network_id }}" "{{ .nodes.no0.network.publish}}#tls_insecure" 'suffrage_candidate' > $state && \
        cat $state > /dev/stderr && \
        cat $state | jq -e -c '. as $root | .value.nodes[] | select( (.node.address == "{{ .nodes.no1.address }}") and (.node.publickey == "{{ .nodes.no1.publickey }}"))'
    range:
      - node: [no0]
    registers:
      - assign: .matched.candidate_in_state
        format: json
      
  # run no1
    actions:
      - type: "run-nodes"
        args:
          - /cmd
          - run
          - --design=config.yml
          - --discovery
          - "{{ .nodes.no0.network.publish }}#tls_insecure"
          - --dev.allow-consensus
        range:
          - node: [no1]

  - condition: |
      {"node": "no1", "x.message": "state switched", "x.next_state.next": "CONSENSUS"}

  - condition: |
      {"node": "no1", "x.message": "new block saved", "x.height": {"$gt": {{ .matched.candidate_state_in_state.height }} }}

  - condition: |
      {"node": "no1", "x.message": "local is in consensus nodes and is in suffrage?", "x.in_suffrage": false}
    actions:
      - type: "host-command"
        args:
          - |
            $ op="{{ hostBase .self.host }}/{{ uuid }}.json"; echo '{"fact": {"candidate": "{{ .nodes.no1.address }}", "_hint": "suffrage-join-fact-v0.0.1", "start_height": {{ .matched.candidate_in_state.start }} }, "_hint": "suffrage-join-operation-v0.0.1"}' | \
                {{ hostFile .self.host "cmd" }} key sign "{{ .nodes.no1.privatekey }}" "{{ .network_id }}" - --node "{{ .nodes.no1.address }}" --token findme | \
                {{ hostFile .self.host "cmd" }} key sign "{{ .nodes.no0.privatekey }}" "{{ .network_id }}" - --node "{{ .nodes.no0.address }}" > "$op" && \
                cat "$op" > /dev/stderr && \
                {{ hostFile .self.host "cmd" }} network client send-operation --log.level=trace "{{ .network_id }}" "{{ .nodes.no0.network.publish}}#tls_insecure" "$op"; \
                {{ hostFile .self.host "cmd" }} network client send-operation --log.level=trace "{{ .network_id }}" "{{ .nodes.no1.network.publish}}#tls_insecure" "$op"
        range:
          - node: [no0]
       
  - condition: |
      {"node": "no1", "x.message": "local is in consensus nodes and is in suffrage?", "x.in_suffrage": true}

  - condition: |
      $ state="{{ hostBase .self.host }}/{{ uuid }}.json"; \
        {{ hostFile .self.host "cmd" }} network client state --log.level=trace "{{ .network_id }}" "{{ .nodes.no0.network.publish}}#tls_insecure" 'suffrage' > $state && \
        cat $state > /dev/stderr && \
        cat $state | jq -e -c '. as $root | .value.nodes[] | select( (.address == "{{ .nodes.no1.address }}") and (.publickey == "{{ .nodes.no1.publickey }}") ) | $root'
    range:
      - node: [no0]

  - condition: |
      $ state="{{ hostBase .self.host }}/{{ uuid }}.json"; \
        {{ hostFile .self.host "cmd" }} network client state --log.level=trace "{{ .network_id }}" "{{ .nodes.no1.network.publish}}#tls_insecure" 'suffrage' > $state && \
        cat $state > /dev/stderr && \
        cat $state | jq -e -c '. as $root | .value.nodes[] | select( (.address == "{{ .nodes.no1.address }}") and (.publickey == "{{ .nodes.no1.publickey }}") ) | $root'
    range:
      - node: [no0]
    registers:
      - assign: .matched.candidate_joined_state
        format: json

  - condition: |
      {"node": "no1", "x.message": "new block saved", "x.height": {"$gt": {{ .matched.candidate_joined_state.height }} }}
