# 2 nodes can do consensus
# - 2 nodes: no0, no1
# - no0 and no1 are in suffrage from genesis
# - no0 does init
# - no1 does import from no0
# - no0 and no1 start
# - no0 and no1 will be in consensus

---
ignore_abnormal_container_exit: true

vars:
  .network_id: mitum contest; Sat 26 Dec 2020 05:29:13 AM KST

designs:
  common: |
    {{ setVar ".self.privatekey" newKey }}
    {{ setVar ".self.publickey" .self.privatekey.Publickey }}

    address: {{ setgetVar ".self.address" ( printf "%ssas" .self.alias ) }}
    privatekey: {{ .self.privatekey }}
    #publickey: {{ .self.privatekey.Publickey }}
    network_id: {{ .network_id }}
    network:
      bind: 0.0.0.0:{{ freePort .self.host (print "node-" .self.alias) "udp" }}
      publish: {{ setgetVar ".self.network.publish" ( print .self.host.PublishHost ":" ( freePort .self.host (print "node-" .self.alias) "udp" ) ) }}
      tls_insecure: true
    storage:
      base: /data
    ballot-stuck-resolver: dummy

  genesis: |
      facts:
        - _hint: suffrage-genesis-join-fact-v0.0.1
          nodes:
            - _hint: node-v0.0.1
              address: {{ .nodes.no0.address }}
              publickey: {{ .nodes.no0.publickey }}
            - _hint: node-v0.0.1
              address: {{ .nodes.no1.address }}
              publickey: {{ .nodes.no1.publickey }}
     
        - _hint: genesis-network-policy-fact-v0.0.1
          policy:
            _hint: network-policy-v0.0.1
            max_operations_in_proposal: 99
            suffrage_candidate_lifespan: 33
            suffrage_candidate_limiter:
              _hint: fixed-suffrage-candidate-limiter-rule-v0.0.1
              limit: 1 
            max_suffrage_size: 99
            suffrage_expel_lifespan: 99

  number_nodes: 2
  nodes:
    no1: |
      sync_sources:
        - type: sync-source-node
          address: {{ .nodes.no0.address }}
          publickey: {{ .nodes.no0.publickey }}
          publish: "{{ .nodes.no0.network.publish }}"
          tls_insecure: true

expects:
  - condition: |
      {"msg": "contest ready"}
    actions:
      - type: "init-nodes"
        args:
          - /cmd
          - init
          - --design=config.yml
          - genesis.yml
        range:
          - node: [no0]

  - condition: |
      {
        "x.message": "genesis block generated",
        "x.blockmap.manifest.height": 0,
        "x.blockmap.node": "{{ .nodes.no0.address }}",
        "x.blockmap.signer": "{{ .nodes.no0.publickey }}"
      }
    registers:
      - assign: .matched.no0.genesis

  - condition: "{}"
    actions:
      - type: "init-nodes"
        args:
          - /cmd
          - storage
          - import
          - --do
          - --design=config.yml
          - /host/no0/data
        range:
          - node: [no1]

  - condition: |
      {"node": "no1", "x.message": "block write database merged", "x.height": 0}

  - condition: |
      {"node": "no1", "x.message": "imported blocks validated"}

  - condition: |
      {"_id": {"$gt": "{{ .matched.no0.genesis._id }}" }, "node": "no0", "x.exit_code": 0, "stderr": true}
    actions:
      - type: "run-nodes"
        args:
          - /cmd
          - run
          - --design=config.yml
          - --dev.allow-consensus
        range:
          - node: [no0]

      - type: "run-nodes"
        args:
          - /cmd
          - run
          - --design=config.yml
          - --discovery
          - "{{ .nodes.no0.network.publish }}#tls_insecure"
          - --dev.allow-consensus
        range:
          - node: [no1]

  - condition: |
      {"x.message": "state switched", "x.next_state.next": "CONSENSUS"}
    registers:
      - assign: .matched.to_consensus
    range:
      - node: [no0, no1]

  - condition: |
      {"_id": {"$gt": "{{ .matched.to_consensus._id }}" }, "x.message": "new block saved"}
    actions:
      - type: "stop-nodes"
        range:
          - node: [no0, no1]
