# for init node with genesis operations
# - 2 nodes: no0, no1
# - no1 is not in suffrage
# - no0 does init and run
# - no0 stores blocks at leas1t 9
# - no1 will sync

---
ignore_abnormal_container_exit: true

vars:
  .network_id: mitum contest; Sat 26 Dec 2020 05:29:13 AM KST

nodes:
  same_host:
    - no0
    - no1

designs:
  common: |
    {{ setVar ".self.privatekey" newKey }}
    {{ setVar ".self.publickey" .self.privatekey.Publickey }}

    address: {{ setgetVar ".self.address" ( printf "%ssas" .self.alias ) }}
    privatekey: {{ .self.privatekey }}
    network_id: {{ .network_id }}
    network:
      bind: 0.0.0.0:{{ freePort .self.host (print "node-" .self.alias) "udp" }}
      publish: {{ setgetVar ".self.network.publish" ( print .self.host.PublishHost ":" ( freePort .self.host (print "node-" .self.alias) "udp" ) ) }}
      tls_insecure: true
    storage:
      base: /data

  genesis: |
      facts:
        - _hint: suffrage-genesis-join-fact-v0.0.1
          nodes:
            - _hint: node-v0.0.1
              address: {{ .nodes.no0.address }}
              publickey: {{ .nodes.no0.publickey }}
     
        - _hint: genesis-network-policy-fact-v0.0.1
          policy:
            _hint: network-policy-v0.0.1
            max_operations_in_proposal: 99
            suffrage_candidate_lifespan: 33
            suffrage_candidate_limiter:
              _hint: fixed-suffrage-candidate-limiter-rule-v0.0.1
              limit: 1 
  
  number-nodes: 4
  nodes:
    no1: |
      sync_sources:
        - type: sync-source-node
          address: {{ .nodes.no0.address }}
          publickey: {{ .nodes.no0.publickey }}
          publish: "{{ .nodes.no0.network.publish }}"
          tls_insecure: true

expects:
  - condition: |
      {"msg": "contest ready"}
    actions:
      - type: "run-nodes"
        args:
          - /cmd
          - init
          - config.yml
          - genesis.yml
        range:
          - node: [no0]

  - condition: |
      {
        "x.message": "genesis block generated",
        "x.blockmap.manifest.height": 0,
        "x.blockmap.node": "{{ .nodes.no0.address }}",
        "x.blockmap.signer": "{{ .nodes.no0.publickey }}"
      }
  
  - condition: |
      {"node": "no0", "x.exit_code": 0, "stderr": true}
    actions:
      - type: "run-nodes"
        args:
          - /cmd
          - run
          - config.yml
        range:
          - node: [no0]

  - condition: |
      {"node": "no0", "x.message": "new block saved", "x.height": {"$gt": 5}}
    actions:
      - type: "stop-nodes"
        range:
          - node: [no0]

  - condition: |
      {"node": "no0", "x.exit_code": 0, "stderr": true}
    actions:
      - type: "run-nodes"
        args:
          - /cmd
          - run
          - config.yml
          - --hold
          - ""
        range:
          - node: [no0]

  - condition: |
      $ find {{ .self.host.Base }}/{{ .self.range.node }}/data/000 | grep map.json | sort | tail -n 1 | awk -F'000/' '{print $NF}' | cut -d '/' -f 1 | sed -e 's/^0*//g'
    range:
      - node: [no0]
    registers:
      - assign: .matched.no0_lastblock
    actions:
      - type: "run-nodes"
        args:
          - /cmd
          - run
          - config.yml
          - --discovery
          - "{{ .nodes.no0.network.publish }}#tls_insecure"
        range:
          - node: [no1]

  - condition: |
      {"node": "no1", "x.message": "state switched", "x.current_state": "STOPPED", "x.next_state.next": "SYNCING"}

  - condition: |
      {"node": "no1", "x.message": "syncer finished", "x.height": { "$gte": {{ .matched.no0_lastblock }} }}

  - condition: |
       $ set -e; {{ hostFile .self.host "cmd" }}  network client '{"key":"suffrage","_hint":"state-header-v0.0.1"}' '{{ .nodes.no1.network.publish }}' | jq -e -c '(.v.value.nodes | length == 1) and (.v.value.nodes[0] | .address == "{{ .nodes.no0.address }}" and .publickey == "{{ .nodes.no0.publickey }}")'
    range:
      - node: [no1]

  - condition: |
       $ {{ hostFile .self.host "cmd" }} network client '{"_hint":"last-blockmap-header-v0.0.1"}' "{{ .nodes.no1.network.publish }}" | jq -e -c '.v.manifest | .height >= {{ .matched.no0_lastblock }}'
    range:
      - node: [no1]
