# 3 nodes can do consensus
# - 3 nodes: no0, no1, no2
# - all nodes are in suffrage from genesis
# - 100, thrshold
# - no0 does init
# - all nodes start
# - all nodes will be in consensus
# - no0, no1 blocks the ballots, which is height=2, round=0 and node=no2
# - consensus stuck
# - no0 and no1 withdraw no2
# - no2 be removed from suffrage of no0 and no1

---
ignore_abnormal_container_exit: true

vars:
  .network_id: mitum contest; Sat 26 Dec 2020 05:29:13 AM KST

designs:
  common: |
    {{ setVar ".self.privatekey" newKey }}
    {{ setVar ".self.publickey" .self.privatekey.Publickey }}

    address: {{ setgetVar ".self.address" ( printf "%ssas" .self.alias ) }}
    privatekey: {{ .self.privatekey }}
    network_id: {{ .network_id }}
    network:
      bind: 0.0.0.0:{{ freePort .self.host (print "node-" .self.alias) "udp" }}
      publish: {{ setgetVar ".self.network.publish" ( print .self.host.PublishHost ":" ( freePort .self.host (print "node-" .self.alias) "udp" ) ) }}
      tls_insecure: true
    storage:
      base: /data
    parameters:
      threshold: 100
      ballot_stuck_wait: 10s
      ballot_stuck_resolve_after: 10s

  genesis: |
      facts:
        - _hint: suffrage-genesis-join-fact-v0.0.1
          nodes:
            - _hint: node-v0.0.1
              address: {{ .nodes.no0.address }}
              publickey: {{ .nodes.no0.publickey }}
            - _hint: node-v0.0.1
              address: {{ .nodes.no1.address }}
              publickey: {{ .nodes.no1.publickey }}
            - _hint: node-v0.0.1
              address: {{ .nodes.no2.address }}
              publickey: {{ .nodes.no2.publickey }}
     
        - _hint: genesis-network-policy-fact-v0.0.1
          policy:
            _hint: network-policy-v0.0.1
            max_operations_in_proposal: 99
            suffrage_candidate_lifespan: 33
            suffrage_candidate_limiter:
              _hint: fixed-suffrage-candidate-limiter-rule-v0.0.1
              limit: 1 
            max_suffrage_size: 99
            suffrage_withdraw_lifespan: 99

  number_nodes: 3
  nodes:
    no0: |
      filter-notify-msg-func:
        script: |
          function filterNotifyMsg(m) {
            var point;
            var node;

            try {
              point = m.sign_fact.fact.point
              node = m.sign_fact.sign.node
            } catch (e) {
              try {
                point = m.fact.point
                node = m.sign.node
              } catch (e) {
                 return true
              }
            }

            if (point.height == 2 && point.round == 0 && node == "{{ .nodes.no2.address }}") {
              log.debug("filtered", "m", m)

              return false
            }

            return true
          }

    no1: |
      sync_sources:
        - type: sync-source-node
          address: {{ .nodes.no0.address }}
          publickey: {{ .nodes.no0.publickey }}
          publish: "{{ .nodes.no0.network.publish }}"
          tls_insecure: true
      filter-notify-msg-func:
        script: |
          function filterNotifyMsg(m) {
            var point;
            var node;

            try {
              point = m.sign_fact.fact.point
              node = m.sign_fact.sign.node
            } catch (e) {
              try {
                point = m.fact.point
                node = m.sign.node
              } catch (e) {
                 return true
              }
            }

            if (point.height == 2 && point.round == 0 && node == "{{ .nodes.no2.address }}") {
              log.debug("filtered", "m", m)

              return false
            }

            return true
          }

    no2: |
      sync_sources:
        - type: sync-source-node
          address: {{ .nodes.no0.address }}
          publickey: {{ .nodes.no0.publickey }}
          publish: "{{ .nodes.no0.network.publish }}"
          tls_insecure: true
      filter-notify-msg-func:
        script: |
          function filterNotifyMsg(m) {
            var point;

            try {
              point = m.sign_fact.fact.point
            } catch (e) {
              try {
                point = m.fact.point
              } catch (e) {
                 return true
              }
            }

            if (point.height == 2) {
              log.debug("filtered", "m", m)

              return false
            }

            return true
          }

expects:
  - condition: |
      {"msg": "contest ready"}
    actions:
      - type: "run-nodes"
        args:
          - /cmd
          - init
          - --design=config.yml
          - genesis.yml
        range:
          - node: [no0]

  - condition: |
      {
        "x.message": "genesis block generated",
        "x.blockmap.manifest.height": 0,
        "x.blockmap.node": "{{ .nodes.no0.address }}",
        "x.blockmap.signer": "{{ .nodes.no0.publickey }}"
      }
    registers:
      - assign: .matched.no0.genesis

  - condition: |
      {"_id": {"$gt": "{{ .matched.no0.genesis._id }}" }, "node": "no0", "x.exit_code": 0, "stderr": true}
    actions:
      - type: "run-nodes"
        args:
          - /cmd
          - run
          - --design=config.yml
        range:
          - node: [no0]

      - type: "run-nodes"
        args:
          - /cmd
          - run
          - --design=config.yml
          - --discovery
          - "{{ .nodes.no0.network.publish }}#tls_insecure"
        range:
          - node: [no1, no2]

  - condition: |
      {"node": "no1", "x.message": "state switched", "x.current_state": "BOOTING", "x.next_state.next": "SYNCING"}

  - condition: |
      {"node": "no2", "x.message": "state switched", "x.current_state": "BOOTING", "x.next_state.next": "SYNCING"}

  - condition: |
      {"node": "no1", "x.message": "state switched", "x.next_state.next": "CONSENSUS"}
    registers:
      - assign: .matched.no1.joining_to_consensus

  - condition: |
      {"node": "no2", "x.message": "state switched", "x.next_state.next": "CONSENSUS"}
    registers:
      - assign: .matched.no2.joining_to_consensus

  - condition: |
      {"_id": {"$gt": "{{ .matched.no2.joining_to_consensus._id }}" }, "node": "no2", "x.message": "new block saved"}
    registers:
      - assign: .matched.no2.new_block_saved

  - condition: |
      {"x.height": {"$gte": {{ .matched.no2.new_block_saved.x.height }} }, "x.message": "new block saved"}
    range:
      - node: [no0, no1, no2]

  - condition: |
      {"x.point.height": 2, "x.point.round": 0, "x.point.stage": "INIT", "x.message": "ballot stuck found"}
    range:
      - node: [no0, no1]

  - log: wait ballot stuck

  - condition: |
      {"x.sign_fact.fact.point.height": 2, "x.sign_fact.fact.point.round": 1, "x.sign_fact.fact.point.stage": "INIT", "x.sign_fact.sign.node": "{{ .nodes.no0.address }}", "x.message": "ballot voted"}
    range:
      - node: [no0, no1]

  - condition: |
      {"x.sign_fact.fact.point.height": 2, "x.sign_fact.fact.point.round": 1, "x.sign_fact.fact.point.stage": "INIT", "x.sign_fact.sign.node": "{{ .nodes.no1.address }}", "x.message": "ballot voted"}
    range:
      - node: [no0, no1]

  - condition: |
      {"x.voteproof.point.height": 2, "x.voteproof.point.round": 0, "x.voteproof.point.stage": "INIT", "x.voteproof._hint": {"$regex": "^init-stuck-voteproof-"}, "x.voteproof.withdraws": {"$size": 1}, "x.voteproof.withdraws.fact.node": "{{ .nodes.no2.address }}", "x.message": "new voteproof"}
    range:
      - node: [no0, no1]

  - condition: |
      $ state="{{ hostBase .self.host }}/withdraw-state.json"; \
        {{ hostFile .self.host "cmd" }} network client --log.level=trace \
             '{"key":"suffrage","_hint":"state-header-v0.0.1"}' "{{ .network_id }}" "{{ .nodes.no0.network.publish}}#tls_insecure" > $state && \
        cat $state && \
        cat $state | jq -e -c '(.value.nodes | length) == 2' && \
        cat $state | jq -e -c '.value.nodes[] | select( (.address == "{{ .nodes.no0.address }}") and (.publickey == "{{ .nodes.no0.publickey }}"))' && \
        cat $state | jq -e -c '.value.nodes[] | select( (.address == "{{ .nodes.no1.address }}") and (.publickey == "{{ .nodes.no1.publickey }}"))'
    range:
      - node: [no0, no1]
    interval: 2s

  - condition: |
      $ cat "{{ hostBase .self.host }}/withdraw-state.json" | jq -e -c '.height'
    range:
      - node: [no1]
    registers:
      - assign: .matched.new_suffrage_height

  - condition: |
      {"x.message": "new block saved", "x.height": {"$gt": {{ .matched.new_suffrage_height }} }}
    range:
      - node: [no0, no1]
    registers:
      - assign: .matched.new_block_saved_after_withdraw


  - condition: |
      $ {{ hostFile .self.host "cmd" }} network client --log.level=trace '{"_hint":"node-info-header-v0.0.1"}' "{{ .network_id }}" "{{ .nodes.no0.network.publish}}#tls_insecure" | \
        jq -e -c 'select(.consensus.state == "CONSENSUS")'
    interval: 2s
    range:
      - node: [no1]

  - condition: |
      $ {{ hostFile .self.host "cmd" }} network client --log.level=trace '{"_hint":"node-info-header-v0.0.1"}' "{{ .network_id }}" "{{ .nodes.no1.network.publish}}#tls_insecure" | \
        jq -e -c 'select(.consensus.state == "CONSENSUS")'
    interval: 2s
    range:
      - node: [no1]

  - condition: |
      $ {{ hostFile .self.host "cmd" }} network client --log.level=trace '{"_hint":"node-info-header-v0.0.1"}' "{{ .network_id }}" "{{ .nodes.no2.network.publish}}#tls_insecure" | \
        jq -e -c 'select(.consensus.state == "SYNCING")'
    interval: 2s
    range:
      - node: [no1]
